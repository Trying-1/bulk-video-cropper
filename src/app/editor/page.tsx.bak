"use client";

import { useState, useRef, useEffect } from "react";
import Link from "next/link";
import { processBatchVideos, cancelProcessing, QualityPreset, qualityPresets } from "@/utils/ffmpeg";
import ProcessingStatus from "@/components/ProcessingStatus";
import VideoPreviewModal from "@/components/VideoPreviewModal";
import QualityPresetSelector from "@/components/QualityPresetSelector";
import dynamic from 'next/dynamic';
import { validateVideo, sanitizeFilename } from "@/utils/fileValidation";
import { logError, formatErrorMessage } from "@/utils/errorHandling";
import { useMediaQuery } from "@/hooks/useMediaQuery";
import ErrorNotification from "@/components/ErrorNotification";

// Dynamically import the ParticleBackground to prevent SSR issues
const EditorParticleBackground = dynamic(
  () => import('./ParticleBackground'),
  { ssr: false }
);

export default function EditorPage() {
  const [videos, setVideos] = useState<Array<{
    id: string;
    name: string;
    file: File;
    url: string;
    processed: boolean;
    processedUrl?: string;
    error?: string;
    duration?: number;
    selected?: boolean;
    cropSettings: {
      x: number;
      y: number;
      width: number;
      height: number;
    };
  }>>([]);
  
  const [currentVideoId, setCurrentVideoId] = useState<string | null>(null);
  const [aspectRatio, setAspectRatio] = useState<string>("16:9");
  const [isProcessing, setIsProcessing] = useState<boolean>(false);
  const [processingProgress, setProcessingProgress] = useState<number>(0);
  const [currentProcessingVideo, setCurrentProcessingVideo] = useState<string>();
  const [completionMessage, setCompletionMessage] = useState<string | undefined>();

  const [cropMode, setCropMode] = useState(false);
  const [cropStartPosition, setCropStartPosition] = useState<{ x: number; y: number } | null>(null);
  const [resizeMode, setResizeMode] = useState<string | null>(null); // 'nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'
  const [previewModal, setPreviewModal] = useState<{isOpen: boolean, url: string, name: string, videoId?: string}>({isOpen: false, url: '', name: ''});
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [useCurrentCropForAll, setUseCurrentCropForAll] = useState(false);
  const [qualityPreset, setQualityPreset] = useState<QualityPreset>('balanced');
  const [selectedCount, setSelectedCount] = useState(0);
  const [selectAll, setSelectAll] = useState(false);
  
  // Performance optimization
  const isLowPerformance = useMediaQuery('(max-width: 768px)') || useMediaQuery('(prefers-reduced-motion: reduce)');
  
  const currentVideo = videos.find(v => v.id === currentVideoId) || null;
  
  const videoRef = useRef<HTMLVideoElement>(null);
  const videoContainerRef = useRef<HTMLDivElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  
  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files.length > 0) {
      setIsUploading(true);
      setErrorMessage(null);
      
      try {
        const files = Array.from(event.target.files);
        const validatedVideos = [];
        
        // Check if adding these files would exceed the 10 video limit
        const currentCount = videos.length;
        const remainingSlots = 10 - currentCount;
        
        if (remainingSlots <= 0) {
          setErrorMessage('Maximum limit of 10 videos reached. Please remove some videos before adding more.');
          return;
        }
        
        // Limit the number of files to process
        const filesToProcess = files.slice(0, remainingSlots);
        
        if (files.length > remainingSlots) {
          setErrorMessage(`Only processing ${remainingSlots} of ${files.length} videos due to the 10 video limit.`);
        }
        
        for (const file of filesToProcess) {
          const validation = await validateVideo(file);
          
          if (validation.valid) {
            validatedVideos.push({
              id: Math.random().toString(36).substring(2, 9),
              name: sanitizeFilename(file.name),
              file: file,
              url: URL.createObjectURL(file),
              processed: false,
              duration: validation.duration,
              cropSettings: {
                x: 0,
                y: 0,
                width: 0,  // Start with zero width/height to indicate not cropped yet
                height: 0
              }
            });
          } else {
            validatedVideos.push({
              id: Math.random().toString(36).substring(2, 9),
              name: file.name,
              file: file,
              url: URL.createObjectURL(file),
              processed: false,
              error: validation.errors.join(', '),
              duration: validation.duration,
              cropSettings: {
                x: 0,
                y: 0,
                width: 0,
                height: 0
              }
            });
          }
        }
        
        setVideos(prev => [...prev, ...validatedVideos]);
        
        if (!currentVideoId && validatedVideos.length > 0) {
          setCurrentVideoId(validatedVideos[0].id);
        }
        
        // Show error if any files had validation issues
        const invalidVideos = validatedVideos.filter(v => v.error);
        if (invalidVideos.length > 0) {
          if (invalidVideos.length === validatedVideos.length && validatedVideos.length > 0) {
            setErrorMessage(`All uploaded files have issues: ${invalidVideos[0].error}`);
          } else if (invalidVideos.length > 0) {
            setErrorMessage(`${invalidVideos.length} of ${validatedVideos.length} files have issues and may not process correctly.`);
          }
        }
      } catch (error) {
        logError(error as Error, { context: 'handleFileChange' });
        setErrorMessage('Error uploading files. Please try again.');
      } finally {
        setIsUploading(false);
      }
    }
  };
  
  const handleRemoveVideo = (id: string) => {
    setVideos(prev => {
      // Find the video to be removed
      const videoToRemove = prev.find(video => video.id === id);
      
      // Revoke object URL if it exists to prevent memory leaks
      if (videoToRemove?.url) {
        try {
          URL.revokeObjectURL(videoToRemove.url);
        } catch (error) {
          console.warn('Failed to revoke URL:', error);
        }
      }
      
      // If the video being removed was selected, update the selection count
      if (videoToRemove?.selected) {
        setSelectedCount(prevCount => Math.max(0, prevCount - 1));
      }
      
      const updatedVideos = prev.filter(video => video.id !== id);
      
      // If we're removing the current video, select another one if available
      if (id === currentVideoId) {
        if (updatedVideos.length > 0) {
          setCurrentVideoId(updatedVideos[0].id);
        } else {
          setCurrentVideoId(null);
        }
      }
      
      // Update selectAll state if needed
      if (updatedVideos.length === 0) {
        setSelectAll(false);
      }
      
      return updatedVideos;
    });
  };
  
  const handleRemoveSelectedVideos = () => {
    setVideos(prev => {
      // Get IDs of selected videos
      const selectedIds = prev.filter(v => v.selected).map(v => v.id);
      
      // Revoke object URLs to prevent memory leaks
      prev.forEach(video => {
        if (video.selected && video.url) {
          try {
            URL.revokeObjectURL(video.url);
            if (video.processedUrl) {
              URL.revokeObjectURL(video.processedUrl);
            }
          } catch (error) {
            console.warn('Failed to revoke URL:', error);
          }
        }
      });
      
      const updatedVideos = prev.filter(video => !video.selected);
      
      // If we're removing the current video, select another one if available
      if (selectedIds.includes(currentVideoId || '')) {
        if (updatedVideos.length > 0) {
          setCurrentVideoId(updatedVideos[0].id);
        } else {
          setCurrentVideoId(null);
        }
      }
      
      // Reset selection states
      setSelectedCount(0);
      setSelectAll(false);
      
      return updatedVideos;
    });
  };
  
  const handleToggleSelect = (id: string) => {
    setVideos(prev => {
      const updatedVideos = prev.map(video => {
        if (video.id === id) {
          const newSelected = !video.selected;
          // Update selection count
          if (newSelected) {
            setSelectedCount(prevCount => prevCount + 1);
          } else {
            setSelectedCount(prevCount => Math.max(0, prevCount - 1));
          }
          return { ...video, selected: newSelected };
        }
        return video;
      });
      
      // Update selectAll state
      setSelectAll(updatedVideos.every(v => v.selected) && updatedVideos.length > 0);
      
      return updatedVideos;
    });
  };
  
  const handleToggleSelectAll = () => {
    const newSelectAll = !selectAll;
    setSelectAll(newSelectAll);
    
    setVideos(prev => {
      const updatedVideos = prev.map(video => ({
        ...video,
        selected: newSelectAll
      }));
      
      // Update selection count
      setSelectedCount(newSelectAll ? updatedVideos.length : 0);
      
      return updatedVideos;
    });
  };
  
  const handleRemoveProcessedVideo = (id: string) => {
    setVideos(prev => {
      const updatedVideos = prev.map(video => {
        if (video.id === id) {
          // Revoke the processed URL to prevent memory leaks
          if (video.processedUrl) {
            try {
              URL.revokeObjectURL(video.processedUrl);
            } catch (error) {
              console.warn('Failed to revoke URL:', error);
            }
          }
          
          return {
            ...video,
            processed: false,
            processedUrl: undefined
          };
        }
        return video;
      });
      
      return updatedVideos;
    });
  };

const handleDownloadAll = () => {
  // Create a temporary container for download links
  const container = document.createElement('div');
  container.style.display = 'none';
  document.body.appendChild(container);
  
  // Get all processed videos
  const processedVideos = videos.filter(v => v.processed && v.processedUrl);
  
  // Create and click download links for each processed video
  processedVideos.forEach(video => {
    if (video.processedUrl) {
      const link = document.createElement('a');
      link.href = video.processedUrl;
      link.download = `cropped-${video.name}`;
      container.appendChild(link);
      link.click();
    }
  });
  
  // Clean up the container after a delay to ensure downloads start
  setTimeout(() => {
    document.body.removeChild(container);
  }, 1000);
  
  // Show success message
  setSuccessMessage(`Downloading ${processedVideos.length} videos...`);
  setTimeout(() => setSuccessMessage(null), 3000);
};

const handleRemoveAllProcessedVideos = () => {
  if (window.confirm('Are you sure you want to remove all processed videos?')) {
    setVideos(prev => prev.map(video => {
      if (video.processed) {
        // Revoke the object URL to prevent memory leaks
        if (video.processedUrl) {
          try {
            URL.revokeObjectURL(video.processedUrl);
          } catch (error) {
            console.warn('Failed to revoke URL:', error);
          }
        }
        
        return {
          ...video,
          processed: false,
          processedUrl: undefined
        };
      }
      return video;
    }));
    
    setSuccessMessage('All processed videos have been deleted');
    setTimeout(() => setSuccessMessage(null), 3000);
  }
};
      
return (
  <div className="min-h-screen bg-gradient-to-br from-teal-50 via-white to-orange-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 relative">
    {/* ... (rest of the code remains the same) */}
    
    {/* Processed Video List */}
    <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 mt-4">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-sm font-medium text-gray-900 dark:text-white">Processed Videos ({videos.filter(v => v.processed).length})</h3>
        {videos.filter(v => v.processed).length > 0 && (
          <div className="flex space-x-2">
            <button
              onClick={handleDownloadAll}
              className="text-xs px-2 py-1 bg-teal-600 text-white rounded hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500 flex items-center"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
              </svg>
              Download All
            </button>
            <button
              onClick={handleRemoveAllProcessedVideos}
              className="text-xs px-2 py-1 bg-red-600 text-white rounded hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 flex items-center"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
              Delete All
            </button>
          </div>
        )}
      </div>
      
      {videos.filter(v => v.processed).length > 0 ? (
        <div className="space-y-2 max-h-60 overflow-y-auto">
          {videos.filter(v => v.processed).map(video => (
            <div 
              key={`processed-${video.id}`} 
              className="flex items-center justify-between p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-600 cursor-pointer"
              onClick={() => video.processedUrl && openPreviewModal(video.processedUrl, video.name, video.id)}
            >
              <div className="flex items-center">
                <div className="flex items-center mr-2" onClick={(e) => e.stopPropagation()}>
                  <input 
                    type="checkbox" 
                    checked={video.selected || false} 
                    onChange={() => handleToggleSelect(video.id)}
                    className="form-checkbox h-3 w-3 text-orange-600 rounded border-gray-300 focus:ring-orange-500"
                              <p className="text-xs font-medium text-gray-900 dark:text-white truncate">cropped-{video.name}</p>
                              {video.duration && (
                                <p className="text-xs text-gray-500 dark:text-gray-400">
                                  {video.duration.toFixed(1)}s
                                </p>
                              )}
                            </div>
                          </div>
                          <div className="flex space-x-2">
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                handleViewProcessedVideo(video.id);
                              }}
                              className="text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-300 text-xs font-medium flex items-center"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                              </svg>
                              Preview
                            </button>
                            <a 
                              href={video.processedUrl} 
                              download={`cropped-${video.name}`}
                              className="text-teal-600 hover:text-teal-800 dark:text-teal-400 dark:hover:text-teal-300 text-xs font-medium flex items-center"
                              onClick={(e) => e.stopPropagation()}
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                              </svg>
                              Download
                            </a>
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                handleRemoveProcessedVideo(video.id);
                              }}
                              className="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 text-xs font-medium flex items-center"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                              </svg>
                              Delete
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <p className="text-sm text-gray-500 dark:text-gray-400 text-center py-4">
                      No processed videos yet
                    </p>
                  )}
                </div>
                
                {/* Process Section */}
                <div className="bg-gradient-to-br from-teal-50 to-teal-100 dark:from-teal-900/40 dark:to-teal-800/40 rounded-lg p-4 shadow-sm">
                  <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-4">Process Video</h3>
                  
                  {/* Quality Preset Selector */}
                  <QualityPresetSelector 
                    selectedPreset={qualityPreset}
                    onChange={setQualityPreset}
                  />
                  
                  <div className="mt-4 bg-gray-50 dark:bg-gray-800 p-3 rounded-md border border-gray-200 dark:border-gray-700">
                    <div className="flex items-center mb-2">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-gray-500 dark:text-gray-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                      </svg>
                      <span className="text-xs text-gray-600 dark:text-gray-300 font-medium">Processing Speed</span>
                    </div>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      {qualityPreset === 'fastest' && 'Near-instant processing with hardware acceleration'}
                      {qualityPreset === 'balanced' && 'Fast processing with good quality balance'}
                      {qualityPreset === 'quality' && 'Higher quality output with software encoding'}
                    </p>
                  </div>
                  
                  <button
                    onClick={handleProcessVideo}
                    disabled={isProcessing || videos.length === 0}
                    className="w-full inline-flex justify-center items-center px-4 py-3 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all transform hover:scale-105 duration-200 mt-4"
                  >
                    {isProcessing ? (
                      <>
                        <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Processing...
                      </>
                    ) : (
                      "Process Videos"
                    )}
                  </button>
                </div>
                
                {/* Instructions */}
                <div className="bg-gradient-to-br from-teal-50 to-teal-100 dark:from-teal-900/40 dark:to-teal-800/40 rounded-lg p-4 shadow-sm">
                  <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-2">How to Use</h3>
                  <ol className="list-decimal list-inside text-sm text-gray-600 dark:text-gray-300 space-y-2">
                    <li>Upload multiple videos using the upload section</li>
                    <li>Select a video from the list to edit</li>
                    <li>Adjust the crop settings or select a preset aspect ratio</li>
                    <li>Click "Process Video" to crop all videos</li>
                    <li>Download the processed videos when ready</li>
                  </ol>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}
